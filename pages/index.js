import React from 'react';
import Credential from '../components/Credential';
import Navbar from '../components/Navbar';
import { useAuth } from '../context/AuthContext';
import Head from 'next/head';
import Form from '../components/Form';
import NavLanding from '../components/NavLanding';
import app from '../firebase';
import { getFirestore, collection, addDoc, getDocs, doc, deleteDoc, getDoc, setDoc } from 'firebase/firestore';
import Landing from '../components/Landing';
import LRUCache from 'lru-cache';
import { serialize } from 'next-mdx-remote/serialize';
import { MDXRemote } from 'next-mdx-remote';

const db = getFirestore(app);
const cache = new LRUCache({ max: 500 });

export default function Home({ users }) {
	const { currentUser } = useAuth();
	const familia = [];
	const userLoged = users?.find(user => user.email === currentUser?.email);
	const afiliados = users?.filter(user => user.idCard === userLoged?.DNI);
	const hola = familia.push(userLoged);
	const hola2 = familia.push(afiliados);
	if (currentUser) {
		return (
			<div>
				<div>
					<Head>
						<title>Bienvenido!</title>
						<meta name="description" content="Generated by create next app" />
						<link rel="icon" href="https://www.cervezasalta.com.ar/img/logo-salta.png" />
					</Head>
					<Navbar />
					<div>
						{userLoged && <Credential props={familia} />}
						{!userLoged && <Form />}
					</div>
				</div>
			</div>
		);
	} else {
		return (
			<div>
				<Head>
					<title>Bienvenido!</title>
					<meta name="description" content="Generated by create next app" />
					<link rel="icon" href="https://www.cervezasalta.com.ar/img/logo-salta.png" />
				</Head>

				<NavLanding />
				<Landing />
			</div>
		);
	}
}

export const getServerSideProps = async context => {
	// Genere una clave única para esta consulta
	const cacheKey = 'my-unique-cache-key';

	// Compruebe si los resultados están en la caché
	const cachedData = cache.get(cacheKey);
	if (cachedData) {
		return { props: { users: cachedData } };
	}

	// Si los resultados no están en la caché, ejecute la consulta
	const querySnapshot = await getDocs(collection(db, 'users'));
	const docs = [];
	querySnapshot.forEach(doc => {
		docs.push({ ...doc.data(), id: doc.id });
	});

	// Guarde los resultados en la caché
	cache.set(cacheKey, docs);

	return { props: { users: docs } };
};
